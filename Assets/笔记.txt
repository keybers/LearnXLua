1.默认的lua脚本放在Resources下

2.luaEnv.AddLoader(委托方法)//注册委托方法，当执行对应相同参数的时候，调用委托函数

3.lambda表达式的核心在于语句块作为主题，忽略语句名称，容易产生闭包，意思是会对传入的“最后的”参数，最后执行。
闭包是一段可以在晚些时候执行的代码块，但是这段代码块依然维护着它第一个被创建时环境（执行上下文）- 即它仍可以使用创建它的方法中局部变量，即使那个方法已经执行完了。

4.先加载注册函数中的规则

5.AB包加载Lua脚本重定向，平时不会使用，只有再测试热更新的时候或者打包的时候会使用

6.AB包并不能识别Lua文件，只有将文件格式后缀名改为.txt等可识别格式之后，打包进AB包，再以TextAsset格式的形态表示，输出lua脚本内容bytes

7.加了特性[CSharpCallLua]后，在unity编辑器中点击Generate Code 生成代码，让Xlua认识有参有返回的委托
在Xlua的Gen文件夹中可以看到生成的代码

8.in 用前必须初始化，类型数据表示输入参数数据类型

out 类型数据表示可以不用通过函数返回得到返回值

ref 用前必须初始化,类型数据表示在函数中通过输入的值，函数改变该值后无论是否有返回值，都会在该全局下改变
初始化原因是可以不用在函数当中赋值

9.在C#调用xlua中，C#启动lua脚本来使用

10.在系统上不能改的方法属性之类上，加特性后Lua与c#之间才可以相互识别。可以把特性汇聚在一处
