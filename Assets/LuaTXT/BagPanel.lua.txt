--一个面板对应一个表
BasePanel:subClass("BagPanel")

BagPanel.Content = nil

--来存储当前 显示的格子 不能设为nil
BagPanel.items = {}
--用来存储当前页签类型 避免重复刷新
BagPanel.nowType = -1
--2.成员方法
--初始化方法
function BagPanel:Init(name)
    self.base.Init(self,name)
    
    if  self.isInitEvent == false then
        --加事件
        --找到没有UI控件的对象 需要手动去找
        self.Content = self:GetControl("SVBag","ScrollRect").transform:Find("Viewport"):Find("Content")

        --关闭按钮
        self:GetControl("ButtonClose","Button").onClick:AddListener(function()
            self:Close()
        end)

        --单选框事件
        --切页机
        --toggle 对应委托，也就是现在的addlistener后的匿名函数  是unityAction<bool>
        --因为UnityAction是系统委托没办法应用到LUA，所以要创建一个csharp类，里面添加静态列表
        --onValueChanged会传入true or false 
        --都是使用监听传给委托函数 有参无参都是unityaction，无参数可以使用Lua函数，但是有参必须使用unityaction委托的函数
        self:GetControl("ToggleEquip","Toggle").onValueChanged:AddListener(function(value)
            if  value == true then
                self:ChangeType(1)
            end
        end)

        self:GetControl("ToggleItem","Toggle").onValueChanged:AddListener(function(value)
            if  value == true then
                self:ChangeType(2)
            end
        end)

        self:GetControl("ToggleGem","Toggle").onValueChanged:AddListener(function(value)
            if  value == true then
                self:ChangeType(3)
            end
        end)

        self.isInitEvent = true
    end
end

--显示隐藏方法
function BagPanel:Show(name)
    self.base.Show(self,name)
    --第一次进来初始化到装备栏目
    if self.nowType == -1 then
        self:ChangeType(1)
    end
end

--逻辑处理函数
--切页签 type 1装备 2道具 3宝石
function BagPanel:ChangeType(type)
    --判断如果已经在该标签 则不更新，否则重复点击就会删除重建，浪费性能
    if(self.nowType == type) then
        return
    end
    --根据玩家信息 来进行格子创建

    --更新之前 把老格子删除 BagPanel.items
    for i = 1, #self.items do
        self.items[i]:Destroy()
    end
    self.items = {}
    --再根据当前选择的类型 来创建新的格子 BagPanel.items

    --根据传入的type来选择 显示传入的数据
    local nowItems = nil

    if type == 1 then
        nowItems = PlayerData.equips
    elseif type == 2 then
        nowItems = PlayerData.items
    else --3
        nowItems = PlayerData.gems
    end

    --一个格子表示一个对象 所以不需要创建N个对象脚本 通过临时创建一个空表对象grid来设置
    --创建格子
    for i = 1, #nowItems do
        --根据数据 创建一个格子对象
        local grid = ItemGrid:new()
        --要实例化对象 设置位置
        grid:Init(self.Content,(i-1)%4*150 + 75,math.floor((i-1)/4)*150 - 75)
        --初始化它的信息 数量和图标
        grid:InitData(nowItems[i])
        --存入当前容器
        table.insert(self.items, grid)
    end
end


